# Task switching settings
TASKSWITCH_PER_SEC = 2000

# Maximum tasks to be run at any one time
TASK_MAX = 4000

# If yes, debug symbols are included in the final kernel
KERNEL_DEBUG_SYMBOLS = y

KERNEL_OPTIMIZE_DEBUG = y

# Turn on kernel debugging output
# This sets the highest level of debugging to display. Choices are:
# KP_TRACE
# KP_DEBUG
# KP_NORMAL
# KP_WARNING
# KP_ERROR
KERNEL_LOG_LEVEL = KP_NORMAL

# The order indicating the number of pages to allocate for klog
# Results in (1 << KLOG_BUFFER_ORDER) pages
# 8 is 1MB
KLOG_BUFFER_ORDER = 8

# The below flags allow setting finer-grained control over the debug output.
KERNEL_LOG_LOCKING = n
KERNEL_LOG_ELF = y
KERNEL_LOG_VFS = n
KERNEL_LOG_SLAB = n
KERNEL_LOG_INODE = n
KERNEL_LOG_SOCKET_REF = n

EXT2_LOG_LEVEL = KP_WARNING

KERNEL_LOG_IP = n
KERNEL_LOG_ICMP = y
KERNEL_LOG_UDP = n
KERNEL_LOG_TCP = n

KERNEL_LOG_ATA = n

KERNEL_TESTS = y

# page order for size of slabs for the slab allocator
KERNEL_SLAB_ORDER = 5

# Locate the kernel at the 3rd GB
KERNEL_BASE = 0xC0000000

# Initial ammount of memory that the kernel needs - 
# 16 MB's. Note that if this is too small, the kernel will fail on boot-up.
KERNEL_SIZE = 0x01000000

# Location for the bootloader to load the kernel at
KERNEL_EXTMEM = 0x00100000

# Location that a programs code will be loaded at
KERNEL_PROGRAM_LINK = 0x08048000

# Measured in pages - 2048 - 8MB
# Loaded via demand paging, so not every process needs the full amount mapped.
KERNEL_PROGRAM_STACK = 2048

# Amount of memory to take away from the top of the Kernel's memory to be used
# for kmap.
KERNEL_KMAP_START = 0xF0000000
KERNEL_KMAP_SIZE = 0x10000000

KERNEL_ARG_PAGES = 4

# Measured in bytes
KEYBOARD_BUFSZ = 256
COM_BUFSZ = 1024

# Necessary if you want proper stack-traces on panics or etc.
FRAME_POINTER = y

# This flag enables or disables block valid/dirty checking, via a CRC over the
# data. Essencially, this guards against forgetting to set block->dirty after
# modifying block->data, by checking block->data with a CRC check if
# block->dirty isn't set.
BLOCK_CHANGE_CRC_CHECK = y

# Similar but more intrusive then the BLOCK_CHANGE_CRC_CHECK. This checks the
# inode dirty flag for consistency. Unlike the block data with the CRC, the
# inode data is verified by simply reading the inode block from the disk and
# checking the information.
INODE_CHANGE_CHECK = y

# Delay in ms of how long to wait before waking up the bdflush
BDFLUSH_DELAY = 30000

# Aproximate maximum size in bytes that the block cache should work
BLOCK_CACHE_MAX_SIZE = (128 * 1024 * 1024)

# Number of bytes to try and free when shrinking the block cache
# Shrinks happen when the max-size is hit (Or OOM conditions, if that happens)
#
# Note: This doesn't account for the `struct block` entries, so the cache takes
# up a bit more memory than this
BLOCK_CACHE_SHRINK_SIZE = (16 * 1024 * 1024)

# Size of the block cache hash table. Must be a power of two
BLOCK_HASH_TABLE_SIZE = 1024

# Max number of pages that can be used by a pipe for holding data
#
# Note: Data written to pipes is never discarded. If a pipe lacks enough space
# to store some data, then the call to write() will hang until space is made
# availiable from another program calling read() and removing some of the data
# from the pipe. Larger pipe's will cause less hanging due to the pipe being
# out of space. This space is allocated on-demand, but also held for the life
# of the pipe once allocated.
PIPE_MAX_PAGES = 10

# Filesystem to mount on boot
ROOT_MAJOR = BLOCK_DEV_ATA
ROOT_MINOR = 1
ROOT_FSTYPE = "ext2"

# Max number of symlinks to follow in one name
LINK_MAX = 10

#### Below is hardware support options ####

# Add a char device for QEMU DEBUG
DRIVER_QEMU_DBG = y

# Determines if support for PC COM serial port should be compiled
PC_COM_SERIAL_DRIVER = y

# Compile support for TTY
TTY_DRIVER = y

# Compile support for 'console' (keyword + screen)
CONSOLE_DRIVER = y

CONSOLE_COUNT = 6

PCI_SUPPORT = y

NET_SUPPORT = y

NET_RTL8139_DRIVER = y
NET_E1000_DRIVER = y
NET_LOOPBACK_DRIVER = y

FS_EXT2_DRIVER = y
FS_PROCFS_DRIVER = y

